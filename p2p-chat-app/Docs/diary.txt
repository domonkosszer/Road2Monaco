27.5.25
So we started working on the new Project. It is a P2P Chat App. The first step is to create a terminal-based version
of what we want to achieve. We will use python for this. We started to create our first class named peer. This class
will be responsible for handling the peer's information. It will represent a user/device in our P2P network.
It has a unique ID, a list of connected peers, a username, a host IP and a port number.

28.5.25
Today, we resolved a critical issue in our P2P chat application and reached a stable, functional version of the
basic terminal chat client. We were initially facing a problem where messages weren’t being received correctly
between peers. After a careful review of the socket logic and message flow, we identified several improvements
that made a significant difference.

First, we ensured that both message sending and receiving used a single UDP socket, which eliminated binding
conflicts and guaranteed that incoming messages arrived at the correct port. We also improved our UDP hole punching mechanism
by sending dummy packets to both the peer’s source and destination ports, helping NATs maintain open pathways on each
side. Additionally, we moved the message listener thread to start before initiating the punch, which prevented us from
missing messages that could arrive immediately after the rendezvous exchange.

Another big enhancement was switching from raw string messages to JSON-formatted payloads. Each message now includes
a type, name, timestamp, and text field, making communication more structured and extensible. This structure not only
future-proofs our protocol but also improves the clarity of chat output in the terminal.
The result of these updates is a responsive, reliable, and clean chat experience between two peers — with each user
seeing timestamped messages in real time. It now feels like a real chat app, albeit a basic one.

Looking ahead, we plan to integrate the Peer class more directly into the chat flow, allowing each client to manage
its identity and peer state. We’ll also start thinking about supporting multiple peers, introducing message
encryption, and preparing the ground for potential GUI development. But for now, we’re proud of the fact that two
users can now chat directly over a network without a central server relaying their messages. That’s a true milestone
for this project.

May 29, 2025
Today, we reached the next development milestone of our P2P chat client. We’ve integrated end-to-end encryption using
Fernet, meaning all messages are now transmitted securely. The key still needs to be exchanged manually between peers
for now, but this already significantly improves communication security.

We’ve also introduced local chat logging: every sent and received message is now saved to a file with a timestamp.
This not only helps with debugging but also makes the chat traceable.

Another new feature is peer monitoring: the system now detects when the other peer has been unreachable for an extended
period and informs the user accordingly. In addition, we’ve implemented simple chat commands like /help, /quit, and
/who to improve usability.

The integration of the STUN protocol for NAT type detection is working reliably and provides valuable insights into the
network environment. Overall, the chat client now feels much more mature and secure.

Next, we plan to automate key exchange and further develop the peer class to manage multiple connections. A graphical
user interface also remains on our roadmap.
